from solver import Solver
import numpy as np

I = [0, 1, 2]
S = list(range(14))
J = list(range(12))
H = [1]
L = [0, 2]
A1 = [10, 11, 12]
A2 = list(range(10))
A4 = []
B = [2, 4, 7, 8, 12]
U = [7]
V = [[i for i in range(1, 13)], [i for i in range(1, 13)], [i for i in range(1, 13)]]
C = [[], [2], [7]]
W = [[2], [1], [2]]
Cp = [[], [], [7]]
K = [[2], [1, 2, 8], [7, 2]]
E = [list(range(13)), list(range(13)), list(range(13))]
P = [(0,1), (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,10), (10,11), (11,12), (12,13)]
o = [0, 0, 13]
f = [13, 13, 0]
G = [[], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], []]
Gp = [[], [], [1], [], [], [], [], [2], [], [], [], [], [], []]
O = [[0, 1], [], [], [], [], [], [], [], [], [], [], [], [], [2]]
F = [[2], [], [], [], [], [], [], [], [], [], [], [], [], [0, 1]]
T1 = [[2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2], [2]]
T2 = [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1]]

speed1 = [40, 10, 35, 50, 50, 50, 50, 50, 10, 40, 40, 45, 50]
speed2 = [20, 10, 35, 50, 50, 50, 50, 50, 10, 35, 40, 45, 50]
dist = [4.2, 2.8, 1.9, 5.1, 1.8, 0.1, 0.1, 5, 0.4, 1, 1, 4, 6.2]

t = np.zeros((3, 13))

for i in I:
    for j in E[i]:
        if i == 0 or i == 1: 
            t[i][j] = dist[j]/speed2[j]
        else:
            t[i][j] = dist[j]/speed1[j]

a = np.full((3, 14), np.nan)

d = np.full((3, 14), np.nan)

a[0,2] = 7 + 10/60
a[0,13] = 8 + 25/60
a[1,1] = 7 + 35/60
a[1,2] = 8
a[1,8] = 8 + 50/60
a[1,13] = 9 + 30/60
a[2,7] = 9
a[2,2] = 9 + 50/60
a[2,0] = 10 + 20/60

d[0,0] = 6 + 45/60
d[0,2] = 7 + 30/60
d[1,0] = 7 + 20/60
d[1,1] = 7 + 45/60
d[1,2] = 8 + 20/60
d[1,8] = 9 + 10/60
d[2,13] = 8 + 15/60
d[2,7] = 9 + 30/60
d[2,2] = 10 + 5/60

dir = [1, 1, 0]

for i in I:
    j = o[i]+1 if dir[i] == 1 else o[i]-1
    finished = False
    while not finished:
        if j == f[i]:
            break
        if np.isnan(a[i,j]):
            a[i,j] = d[i,j-1] + t[i,j]  if dir[i] == 1 else d[i,j+1] + t[i,j]
            d[i,j] = a[i,j]

        j = j+1 if dir[i] == 1 else j-1

n = [0, 0, 3, 0, 1, 0, 0, 1, 2, 0, 0, 0, 1, 0]
m = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1]

α = 5/60
β = 30/60
γ = 10/60
θ = 15/60
λ = 5
τ = lambda a,b : min(a,b)
M = 48

solver = Solver(I, S, J, H, L, A1, A2, A4, B, U, V, C, W, Cp, K, E, P, o, f, G, Gp, O, F, T1, T2, a, d, t, n, m, α, β, γ, θ, λ, τ, M)
solver.solve()








